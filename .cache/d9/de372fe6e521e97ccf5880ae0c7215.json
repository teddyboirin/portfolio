{"id":"../node_modules/bin-pack/packer.growing.js","dependencies":[{"name":"/Users/teddyboirin/Desktop/teddyboirin/package.json","includedInParent":true,"mtime":1546176117179},{"name":"/Users/teddyboirin/Desktop/teddyboirin/node_modules/bin-pack/package.json","includedInParent":true,"mtime":1546176116864}],"generated":{"js":"/******************************************************************************\n\nThis is a binary tree based bin packing algorithm that is more complex than\nthe simple Packer (packer.js). Instead of starting off with a fixed width and\nheight, it starts with the width and height of the first block passed and then\ngrows as necessary to accomodate each subsequent block. As it grows it attempts\nto maintain a roughly square ratio by making 'smart' choices about whether to\ngrow right or down.\n\nWhen growing, the algorithm can only grow to the right OR down. Therefore, if\nthe new block is BOTH wider and taller than the current target then it will be\nrejected. This makes it very important to initialize with a sensible starting\nwidth and height. If you are providing sorted input (largest first) then this\nwill not be an issue.\n\nA potential way to solve this limitation would be to allow growth in BOTH\ndirections at once, but this requires maintaining a more complex tree\nwith 3 children (down, right and center) and that complexity can be avoided\nby simply chosing a sensible starting block.\n\nBest results occur when the input blocks are sorted by height, or even better\nwhen sorted by max(width,height).\n\nInputs:\n------\n\n\tblocks: array of any objects that have .w and .h attributes\n\nOutputs:\n-------\n\n\tmarks each block that fits with a .fit attribute pointing to a\n\tnode with .x and .y coordinates\n\nExample:\n-------\n\n\tvar blocks = [\n\t\t{ w: 100, h: 100 },\n\t\t{ w: 100, h: 100 },\n\t\t{ w:  80, h:  80 },\n\t\t{ w:  80, h:  80 },\n\t\tetc\n\t\tetc\n\t];\n\n\tvar packer = new GrowingPacker();\n\tpacker.fit(blocks);\n\n\tfor(var n = 0 ; n < blocks.length ; n++) {\n\t\tvar block = blocks[n];\n\t\tif (block.fit) {\n\t\t\tDraw(block.fit.x, block.fit.y, block.w, block.h);\n\t\t}\n\t}\n\n\n******************************************************************************/\n\nvar GrowingPacker = function() { };\n\nGrowingPacker.prototype = {\n\n\tfit: function(blocks) {\n\t\tvar n, node, block, len = blocks.length, fit;\n\t\tvar width  = len > 0 ? blocks[0].width : 0;\n\t\tvar height = len > 0 ? blocks[0].height : 0;\n\t\tthis.root = { x: 0, y: 0, width: width, height: height };\n\t\tfor (n = 0; n < len ; n++) {\n\t\t\tblock = blocks[n];\n\t\t\tif (node = this.findNode(this.root, block.width, block.height)) {\n\t\t\t\tfit = this.splitNode(node, block.width, block.height);\n\t\t\t\tblock.x = fit.x;\n\t\t\t\tblock.y = fit.y;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfit = this.growNode(block.width, block.height);\n\t\t\t\tblock.x = fit.x;\n\t\t\t\tblock.y = fit.y;\n\t\t\t}\n\t\t}\n\t},\n\n\tfindNode: function(root, width, height) {\n\t\tif (root.used)\n\t\t\treturn this.findNode(root.right, width, height) || this.findNode(root.down, width, height);\n\t\telse if ((width <= root.width) && (height <= root.height))\n\t\t\treturn root;\n\t\telse\n\t\t\treturn null;\n\t},\n\n\tsplitNode: function(node, width, height) {\n\t\tnode.used = true;\n\t\tnode.down  = { x: node.x,         y: node.y + height, width: node.width,         height: node.height - height };\n\t\tnode.right = { x: node.x + width, y: node.y,          width: node.width - width, height: height               };\n\t\treturn node;\n\t},\n\n\tgrowNode: function(width, height) {\n\t\tvar canGrowDown  = (width  <= this.root.width);\n\t\tvar canGrowRight = (height <= this.root.height);\n\n\t\tvar shouldGrowRight = canGrowRight && (this.root.height >= (this.root.width  + width )); // attempt to keep square-ish by growing right when height is much greater than width\n\t\tvar shouldGrowDown  = canGrowDown  && (this.root.width  >= (this.root.height + height)); // attempt to keep square-ish by growing down  when width  is much greater than height\n\n\t\tif (shouldGrowRight)\n\t\t\treturn this.growRight(width, height);\n\t\telse if (shouldGrowDown)\n\t\t\treturn this.growDown(width, height);\n\t\telse if (canGrowRight)\n\t\t\treturn this.growRight(width, height);\n\t\telse if (canGrowDown)\n\t\t\treturn this.growDown(width, height);\n\t\telse\n\t\t\treturn null; // need to ensure sensible root starting size to avoid this happening\n\t},\n\n\tgrowRight: function(width, height) {\n\t\tthis.root = {\n\t\t\tused: true,\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\twidth: this.root.width + width,\n\t\t\theight: this.root.height,\n\t\t\tdown: this.root,\n\t\t\tright: { x: this.root.width, y: 0, width: width, height: this.root.height }\n\t\t};\n\t\tvar node;\n\t\tif (node = this.findNode(this.root, width, height))\n\t\t\treturn this.splitNode(node, width, height);\n\t\telse\n\t\t\treturn null;\n\t},\n\n\tgrowDown: function(width, height) {\n\t\tthis.root = {\n\t\t\tused: true,\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\twidth: this.root.width,\n\t\t\theight: this.root.height + height,\n\t\t\tdown:  { x: 0, y: this.root.height, width: this.root.width, height: height },\n\t\t\tright: this.root\n\t\t};\n\t\tvar node;\n\t\tif (node = this.findNode(this.root, width, height))\n\t\t\treturn this.splitNode(node, width, height);\n\t\telse\n\t\t\treturn null;\n\t}\n\n};\n\nmodule.exports = GrowingPacker;\n\n","map":{"mappings":[{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/bin-pack/packer.growing.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}}],"sources":{"../node_modules/bin-pack/packer.growing.js":"/******************************************************************************\n\nThis is a binary tree based bin packing algorithm that is more complex than\nthe simple Packer (packer.js). Instead of starting off with a fixed width and\nheight, it starts with the width and height of the first block passed and then\ngrows as necessary to accomodate each subsequent block. As it grows it attempts\nto maintain a roughly square ratio by making 'smart' choices about whether to\ngrow right or down.\n\nWhen growing, the algorithm can only grow to the right OR down. Therefore, if\nthe new block is BOTH wider and taller than the current target then it will be\nrejected. This makes it very important to initialize with a sensible starting\nwidth and height. If you are providing sorted input (largest first) then this\nwill not be an issue.\n\nA potential way to solve this limitation would be to allow growth in BOTH\ndirections at once, but this requires maintaining a more complex tree\nwith 3 children (down, right and center) and that complexity can be avoided\nby simply chosing a sensible starting block.\n\nBest results occur when the input blocks are sorted by height, or even better\nwhen sorted by max(width,height).\n\nInputs:\n------\n\n\tblocks: array of any objects that have .w and .h attributes\n\nOutputs:\n-------\n\n\tmarks each block that fits with a .fit attribute pointing to a\n\tnode with .x and .y coordinates\n\nExample:\n-------\n\n\tvar blocks = [\n\t\t{ w: 100, h: 100 },\n\t\t{ w: 100, h: 100 },\n\t\t{ w:  80, h:  80 },\n\t\t{ w:  80, h:  80 },\n\t\tetc\n\t\tetc\n\t];\n\n\tvar packer = new GrowingPacker();\n\tpacker.fit(blocks);\n\n\tfor(var n = 0 ; n < blocks.length ; n++) {\n\t\tvar block = blocks[n];\n\t\tif (block.fit) {\n\t\t\tDraw(block.fit.x, block.fit.y, block.w, block.h);\n\t\t}\n\t}\n\n\n******************************************************************************/\n\nvar GrowingPacker = function() { };\n\nGrowingPacker.prototype = {\n\n\tfit: function(blocks) {\n\t\tvar n, node, block, len = blocks.length, fit;\n\t\tvar width  = len > 0 ? blocks[0].width : 0;\n\t\tvar height = len > 0 ? blocks[0].height : 0;\n\t\tthis.root = { x: 0, y: 0, width: width, height: height };\n\t\tfor (n = 0; n < len ; n++) {\n\t\t\tblock = blocks[n];\n\t\t\tif (node = this.findNode(this.root, block.width, block.height)) {\n\t\t\t\tfit = this.splitNode(node, block.width, block.height);\n\t\t\t\tblock.x = fit.x;\n\t\t\t\tblock.y = fit.y;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfit = this.growNode(block.width, block.height);\n\t\t\t\tblock.x = fit.x;\n\t\t\t\tblock.y = fit.y;\n\t\t\t}\n\t\t}\n\t},\n\n\tfindNode: function(root, width, height) {\n\t\tif (root.used)\n\t\t\treturn this.findNode(root.right, width, height) || this.findNode(root.down, width, height);\n\t\telse if ((width <= root.width) && (height <= root.height))\n\t\t\treturn root;\n\t\telse\n\t\t\treturn null;\n\t},\n\n\tsplitNode: function(node, width, height) {\n\t\tnode.used = true;\n\t\tnode.down  = { x: node.x,         y: node.y + height, width: node.width,         height: node.height - height };\n\t\tnode.right = { x: node.x + width, y: node.y,          width: node.width - width, height: height               };\n\t\treturn node;\n\t},\n\n\tgrowNode: function(width, height) {\n\t\tvar canGrowDown  = (width  <= this.root.width);\n\t\tvar canGrowRight = (height <= this.root.height);\n\n\t\tvar shouldGrowRight = canGrowRight && (this.root.height >= (this.root.width  + width )); // attempt to keep square-ish by growing right when height is much greater than width\n\t\tvar shouldGrowDown  = canGrowDown  && (this.root.width  >= (this.root.height + height)); // attempt to keep square-ish by growing down  when width  is much greater than height\n\n\t\tif (shouldGrowRight)\n\t\t\treturn this.growRight(width, height);\n\t\telse if (shouldGrowDown)\n\t\t\treturn this.growDown(width, height);\n\t\telse if (canGrowRight)\n\t\t\treturn this.growRight(width, height);\n\t\telse if (canGrowDown)\n\t\t\treturn this.growDown(width, height);\n\t\telse\n\t\t\treturn null; // need to ensure sensible root starting size to avoid this happening\n\t},\n\n\tgrowRight: function(width, height) {\n\t\tthis.root = {\n\t\t\tused: true,\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\twidth: this.root.width + width,\n\t\t\theight: this.root.height,\n\t\t\tdown: this.root,\n\t\t\tright: { x: this.root.width, y: 0, width: width, height: this.root.height }\n\t\t};\n\t\tvar node;\n\t\tif (node = this.findNode(this.root, width, height))\n\t\t\treturn this.splitNode(node, width, height);\n\t\telse\n\t\t\treturn null;\n\t},\n\n\tgrowDown: function(width, height) {\n\t\tthis.root = {\n\t\t\tused: true,\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\twidth: this.root.width,\n\t\t\theight: this.root.height + height,\n\t\t\tdown:  { x: 0, y: this.root.height, width: this.root.width, height: height },\n\t\t\tright: this.root\n\t\t};\n\t\tvar node;\n\t\tif (node = this.findNode(this.root, width, height))\n\t\t\treturn this.splitNode(node, width, height);\n\t\telse\n\t\t\treturn null;\n\t}\n\n};\n\nmodule.exports = GrowingPacker;\n\n"},"lineCount":157}},"hash":"6bf50deb12902a2ee7aae4d53ccba979","cacheData":{"env":{}}}